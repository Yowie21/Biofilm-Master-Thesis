load "msh3"

verbosity = 0;  // Controls the level of debug information printed


// Simulation parameters
real mu = 0.4;  // Reaction rate coefficient
real kappa = 0.01;  // Half-saturation constant
real lambda = 0.01;  // Nitrogen loss rate
real eta = 0.42;  // Bacterial death rate
real m = 4.0;  // PME exponent


// Model functions
func real r(real v) { return v/(kappa+v); }

func real Phi(real u) {
	if (u <= 0) {
		return 0;
	} else {
		return u^m;
	}
}

func real Phiprime(real u) {
	if (u <= 0) {
		return 0;
	} else {
		return m * u^(m-1);
	}
}

func real Phiprimeprime(real u) {
	if (u <= 0) {
		return 0;
	} else {
		return m * (m-1) * u^(m-2);
	}
}

// Double splitting functions
func real b(real s) {
	if (s < 0) {
		return 0;
	} else if (s <= m^(1/(1-m))) {
		return s;
	} else {
		return (s + m^(m/(1-m)) - m^(1/(1-m)))^(1/m);
	}
}

func real bprime(real s) {
	if (s < 0) {
		return 0;
	} else if (s <= m^(1/(1-m))) {
		return 1;
	} else {
		return (1/m) * (s + m^(m/(1-m)) - m^(1/(1-m)))^((1-m)/m);
	}
}

func real B(real s) {
	if (s < 0) {
		return s;
	} else if (s <= m^(1/(1-m))) {
		return s^m;
	} else {
		return s + m^(m/(1-m)) - m^(1/(1-m));
	}
}

func real Bprime(real s) {
	if (s < 0) {
		return 1;
	} else if (s <= m^(1/(1-m))) {
		return m * s^(m-1);
	} else {
		return 1;
	}
}

func real Binv(real w) {
	if (w < 0) {
		return w;
	} else if (w <= m^(m/(1-m))) {
		return w^(1/m);
	} else {
		return w - m^(m/(1-m)) + m^(1/(1-m));
	}
}


// Bulk velocity field
func q = [0.0, 0.0];


// Discretisation parameters
real dt = 1e-2;  // Temporal discretisation parameter


//Initial conditions and final conditions
func u1 = 1.0 + 2*mu/pi * r(1+lambda*dt) * sin(pi*x)^2 * sin(0.5*pi*y);
func u0 = 1 + lambda*dt + 2*mu/pi * r(1+lambda*dt) * ((1 + (lambda + 4.25 * pi^2) * dt) * sin(pi*x)^2 - 2 * pi^2 * dt) * sin(0.5*pi*y);
func v1 = sin(pi*x)^2;
func v0 = (1 + dt * (eta - r(1+lambda*dt))) * v1 - pi^2 * dt * (Phiprimeprime(v1) * sin(2*pi*x)^2 + 2 * Phiprime(v1) * cos(2*pi*x));

func dxu = 2*mu * r(1+lambda*dt) * sin(2*pi*x) * sin(0.5*pi*y);
func dyu = mu * r(1+lambda*dt) * sin(pi*x)^2 * cos(0.5*pi*y);

// Linearisation parameters
real L = 1.5;  // Value of L in the M-scheme
real ML = 1e-3;  // Value of ML in the M-scheme
int maxIter = 100;  // Maximum number of iterations for the stopping criterion
real errorTol = 1e-6;  // Error tolerance for the stopping criterion


// The linearisation coefficients
func real Lb(real s) { return min(L, max(bprime(s) + ML*dt, 2*ML*dt)); }
func real LB(real s) { return min(L, max(Bprime(s) + ML*dt, 2*ML*dt)); }


// Useful macros
macro grad(v) [dx(v), dy(v)]// Gradient operator


// Grid resolutions to test (resolution N means N triangles along each edge of the square grid
//                                              resulting in approx. 2*N*N triangles and $h \approx 2\sqrt{2}/N$)
int[int] Nss = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200];

cout << "h -- u error -- v error -- w error -- s error" << endl;
for (int j = 0; j < Nss.n; j++) {
	int nbN = Nss[j];


	// Domain definition and mesh generation
	mesh Thb = square(2, 2);
	real h = 1.0/nbN;
	for(int i = 0; i <= 10; i++) {
		Thb = adaptmesh(Thb, h, IsMetric=true, nbvx=2*nbN*nbN);  // This is here to make sure the mesh isn't axis-aligned
	}
	int[int] surface = [1];
	int[int] notsurface = [2, 3, 4];
	int[int] top = [3];
	meshL Ths = extract(Thb, label=surface);


	// Finite element spaces and functions
	fespace P0s(Ths, P0);
	fespace Vh(Ths, [P1, P0]);
	fespace P0b(Thb, P0);
	fespace Uh(Thb, P1);

	P0s vh = v0;
	P0s vold = v0;
	Vh [wh, sh] = [Phi(vh), Binv(Phi(vh))], [phi, psi];
	Vh [wprev, sprev] = [Phi(vh), Binv(Phi(vh))];

	Uh uh = u0, xi;
	Uh uold = u0;
	Uh qh1 = q[0], qh2 = q[1];
	P0b uoldproj = u0, chi;


	// Variational forms of the coupled IBVPs
	problem L2Project(uoldproj, chi) =
	int2d(Thb)(uoldproj * chi)
	- int2d(Thb)(u0 * chi);

	problem Nitrogen(uh, xi) =
	int2d(Thb)((1 + lambda * dt) * uh * xi)
	+ int2d(Thb)(dt * grad(uh) '* grad(xi))
	+ int2d(Thb)(dt * uh * [qh1, qh2] '* grad(xi))
	- int2d(Thb)(uold * xi)
	+ int1d(Thb, surface)(mu * dt * r(uoldproj) * vh * xi);

	problem Biofilm([wh, sh], [phi, psi]) =
	int1d(Ths)((1 + dt * (eta - r(uoldproj))) * Lb(sprev) * sh * phi)
	+ int1d(Ths)(dt * dx(wh) * dx(phi))
	- int1d(Ths)(vold * phi)
	- int1d(Ths)((1 + dt * (eta - r(uoldproj))) * (Lb(sprev) * sprev - b(sprev)) * phi)
	+ int1d(Ths)((1 + dt * (eta - r(uoldproj))) * Lb(sprev) * (LB(sprev) * sh - wh) * psi)
	- int1d(Ths)((1 + dt * (eta - r(uoldproj))) * Lb(sprev) * (LB(sprev) * sprev - B(sprev)) * psi)
	+ on(1, 2, wh = 0);


	// Iteration variables
	int it = 0;  // Current iteration index
	real linError;  // Current linearisation error
	int paramDiv = false;  // Divergence flag

	L2Project;

	linError = 1;
	it = 0;

	while (it < maxIter && linError > errorTol) {  // Stopping criterion
		it++;

		// Solve the surface equation
		Biofilm;

		// Compute the current linearisation error
		linError = sqrt(int1d(Ths)(Lb(sprev) * LB(sprev) * (sh-sprev)^2 + dt * (grad(wh) - grad(wprev)) '* (grad(wh) - grad(wprev))));

		if (verbosity > 1) cout << endl << "Linearisation error after iteration " << it << " is " << linError << endl;

		// Update the solutions
		vh = Lb(sprev) * (sh - sprev) + b(sprev);
		[wprev, sprev] = [wh, sh];

		if (linError > 100) {
			paramDiv = true;
			break;
		}
	}

	if (verbosity > 0) {
		if (linError <= errorTol) {
			cout << "Linearisation scheme converged after " << it << " iterations" << endl << endl;
		} else {
			cout << "Linearisation scheme did not converge after " << it << " iterations, continuing..." << endl << endl;
		}
	}

	// Solve the bulk equation
	Nitrogen;

	// The discretisation errors
	real errU = sqrt(int2d(Thb)((uh - u1)^2 + (grad(uh) - [dxu, dyu]) '* (grad(uh) - [dxu, dyu])));
	real errV = sqrt(int1d(Ths)((vh - v1)^2));
	real errW = sqrt(int1d(Ths)((dx(wh) - pi * Phiprime(v1) * sin(2*pi*x))^2));
	real errS = sqrt(int1d(Ths)((sh - Binv(Phi(v1)))^2));
	cout << Thb.hmax << " " << errU << " " << errV << " " << errW << " " << errS << endl;
}