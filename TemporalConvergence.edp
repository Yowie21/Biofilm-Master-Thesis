load "msh3"
load "mmg"

verbosity = 0;


// Simulation parameters
real mu = 0.4;  // Reaction rate coefficient
real kappa = 0.01;  // Reaction rate growth rate
real lambda = 0.01;  // Nitrogen loss rate
real eta = 0.42;  // Bacterial death rate

real m = 1.5;


// Model functions
func real r(real v) { return v/(kappa+v); }

// Diffusion function
func real Phi(real u) {
	if (u <= 0) {
		return 0;
	} else {
		return u^m;
	}
}

func real Phiprime(real u) {
	if (u <= 0) {
		return 0;
	} else {
		return m * u^(m-1);
	}
}

func real Phiprimeprime(real u) {
	if (u <= 0) {
		return 0;
	} else {
		return m * (m-1) * u^(m-2);
	}
}

func real b(real s) {
	if (s < 0) {
		return 0;
	} else if (s <= m^(1/(1-m))) {
		return s;
	} else {
		return (s + m^(m/(1-m)) - m^(1/(1-m)))^(1/m);
	}
}

func real bprime(real s) {
	if (s < 0) {
		return 0;
	} else if (s <= m^(1/(1-m))) {
		return 1;
	} else {
		return (1/m) * (s + m^(m/(1-m)) - m^(1/(1-m)))^((1-m)/m);
	}
}

func real binv(real w) {
	if (w < 0) {
		return 0;
	} else if (w <= m^(1/(1-m))) {
		return w;
	} else {
		return w^m + m^(m/(1-m)) - m^(1/(1-m));
	}
}

func real B(real s) {
	if (s < 0) {
		return s;
	} else if (s <= m^(1/(1-m))) {
		return s^m;
	} else {
		return s + m^(m/(1-m)) - m^(1/(1-m));
	}
}

func real Bprime(real s) {
	if (s < 0) {
		return 1;
	} else if (s <= m^(1/(1-m))) {
		return m * s^(m-1);
	} else {
		return 1;
	}
}

func real Binv(real w) {
	if (w < 0) {
		return w;
	} else if (w <= m^(m/(1-m))) {
		return w^(1/m);
	} else {
		return w - m^(m/(1-m)) + m^(1/(1-m));
	}
}

// Bulk velocity field
func F = [0, 0];


//Initial conditions
real t = 0;
func M0 = exp(-50 * x^2);
func N0 = 1.0;


// Discretisation parameters
real endTime = 1.0;
int numSteps = 100000;  // Number of timesteps
int Nref = numSteps;
real dt = endTime/numSteps;  // Temporal discretisation parameter

// Linearisation parameters
real L = 1.5;  // Value of ML in the M-scheme
real M = 1e-3;  // Value of M in the M-scheme
int maxIter = 100;  // Maetamum number of iterations for the stopping criterion
real errorTol = 1e-6;  // Error tolerance for the stopping criterion


// Domain definition and mesh generation
mesh Thb = square(2, 2);
for(int i = 0; i <= 10; i++) {
	Thb = adaptmesh(Thb, 0.01, IsMetric=true, nbvx=80000);  // This is here to make sure the mesh isn't axis-aligned
}
int[int] surface = [1];
int[int] notsurface = [2, 3, 4];
int[int] top = [3];
meshL Ths = extract(Thb, label=surface);


// The linearisation coefficients
func real Lb(real s) { return min(L, max(bprime(s) + M*dt, 2*M*dt)); }
func real LB(real s) { return min(L, max(Bprime(s) + M*dt, 2*M*dt)); }


// Finite element spaces and functions
fespace Us(Ths, P0);
fespace Vs(Ths, [P1, P0]);
fespace Ws(Ths, P1);
fespace Ub(Thb, P0);
fespace Vb(Thb, P1);

Us Mh = M0;
Us Mold = Mh;
Vs [wh, sh] = [Phi(Mh), binv(Mh)], [phi, psi];
Vs [wprev, sprev] = [Phi(Mh), binv(Mh)];
Ws wold = Phi(Mh);

Vb Nh = N0, xi;
Vb Nold = Nh;
Vb Fh1 = F[0], Fh2 = F[1];
Ub Noldproj = Nh, chi;

Vb[int] refSolU(numSteps+1);
Us[int] refSolV(numSteps+1);
Ws[int] refSolW(numSteps+1);
Us[int] refSolS(numSteps+1);
refSolU[0] = Nh;
refSolV[0] = Mh;
refSolW[0] = wh;
refSolS[0] = sh;


// Useful macros
macro grad(v) [dx(v), dy(v)]// Gradient operator
macro div(v) (dx(v#1) + dy(v#2))// Divergence operator


// Variational forms of the coupled IBVPs
problem L2Project(Noldproj, chi) =
int2d(Thb)(Noldproj * chi)
- int2d(Thb)(Nold * chi);

problem Nitrogen(Nh, xi) =
int2d(Thb)((1 + lambda * dt) * Nh * xi)
+ int1d(Thb, surface)(mu * dt * r(Noldproj) * Mh * xi)
+ int2d(Thb)(dt * (grad(Nh) - [Fh1, Fh2] * Nh) '* grad(xi))
- int2d(Thb)(Nold * xi);

problem Biofilm([wh, sh], [phi, psi]) =
int1d(Ths)((1 + dt * (eta - r(Noldproj))) * Lb(sprev) * sh * phi)
+ int1d(Ths)(dt * grad(wh) '* grad(phi))
- int1d(Ths)(Mold * phi)
- int1d(Ths)((1 + dt * (eta - r(Noldproj))) * (Lb(sprev) * sprev - b(sprev)) * phi)
+ int1d(Ths)((1 + dt * (eta - r(Noldproj))) * Lb(sprev) * (LB(sprev) * sh - wh) * psi)
- int1d(Ths)((1 + dt * (eta - r(Noldproj))) * Lb(sprev) * (LB(sprev) * sprev - B(sprev)) * psi)
+ on(0, 1, wh = 0);


// Iteration variables
int it = 0;  // Current iteration index
real linError;  // Current linearisation error
int paramDiv = false;  // Divergence flag


cout << "Starting reference solution..." << endl;
for(int n = 1; n <= numSteps; n++) {
	t = t + dt;
	cout << t;
	L2Project;

	linError = 1;
	it = 0;

	while (it < maxIter && linError > errorTol) {  // Stopping criterion
		it++;

		// Solve the biofilm equation
		Biofilm;

		// Compute the current linearisation error
		linError = sqrt(int1d(Ths)(Lb(sprev) * LB(sprev) * (sh-sprev)^2 + dt * (grad(wh) - grad(wprev)) '* (grad(wh) - grad(wprev))));

		if (verbosity > 1) cout << endl << "Linearisation error after iteration " << it << " is " << linError << endl;

		// Update the solutions
		Mh = Lb(sprev) * (sh - sprev) + b(sprev);
		[wprev, sprev] = [wh, sh];

		if (linError > 100) {
			paramDiv = true;
			break;
		}
	}
	
	cout << " (" << it << ")" << endl;

	if (verbosity > 0) {
		if (linError <= errorTol) {
			cout << "Linearisation scheme converged after " << it << " iterations" << endl << endl;
		} else {
			cout << "Linearisation scheme did not converge after " << it << " iterations, continuing..." << endl << endl;
		}
	}

	if (paramDiv) {
		cout << "Linearisation scheme DIVERGED after " << it << " iterations" << endl << endl;
		break;
	}

	// Solve the nitrogen equation
	Nitrogen;

	// Update the solutions
	Mold = Mh;
	Nold = Nh;
	wold = wh;

	refSolU[n] = Nh;
	refSolV[n] = Mh;
	refSolW[n] = wh;
	refSolS[n] = sh;
}
cout << "Finished reference solution." << endl;

// We absolutely need these to be divisors of Nref
int[int] numStepss = [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000];

for (int j = 0; j < numStepss.n; j++) {
	numSteps = numStepss[j];
	dt = endTime/numSteps;
	t = 0;
	real errUsq = 0.0;
	real errVsq = 0.0;
	real errWsq = 0.0;
	real errSsq = 0.0;

	Mh = M0;
	Mold = Mh;
	[wh, sh] = [Phi(Mh), binv(Mh)];
	[wprev, sprev] = [Phi(Mh), binv(Mh)];
	wold = Phi(Mh);

	Nh = N0;
	Nold = Nh;
	Ub Noldproj = Nh;

	// Iteration variables
	it = 0;  // Current iteration index
	linError;  // Current linearisation error
	paramDiv = false;  // Divergence flag

	for(int n = 1; n <= numSteps; n++) {
		t = t + dt;
		if (n % 10 == 0) cout << t << endl;
		L2Project;

		linError = 1;
		it = 0;

		while (it < maxIter && linError > errorTol) {  // Stopping criterion
			it++;

			// Solve the biofilm equation
			Biofilm;

			// Compute the current linearisation error
			linError = sqrt(int1d(Ths)(Lb(sprev) * LB(sprev) * (sh-sprev)^2 + dt * (grad(wh) - grad(wprev)) '* (grad(wh) - grad(wprev))));

			if (verbosity > 1) cout << endl << "Linearisation error after iteration " << it << " is " << linError << endl;

			// Update the solutions
			Mh = Lb(sprev) * (sh - sprev) + b(sprev);
			[wprev, sprev] = [wh, sh];

			if (linError > 100) {
				paramDiv = true;
				break;
			}
		}

		if (verbosity > 0) {
			if (linError <= errorTol) {
				cout << "Linearisation scheme converged after " << it << " iterations" << endl << endl;
			} else {
				cout << "Linearisation scheme did not converge after " << it << " iterations, continuing..." << endl << endl;
			}
		}

		if (paramDiv) {
			cout << "Linearisation scheme DIVERGED after " << it << " iterations" << endl << endl;
			break;
		}

		// Solve the nitrogen equation
		Nitrogen;

		int Nratio = Nref/numSteps;

		Vb aNU = numSteps / endTime * (Nh - Nold);
		Vb bNU = Nh - n * (Nh - Nold);
		Ws aNW = numSteps / endTime * (wh - wold);
		Ws bNW = wh - n * (wh - wold);

		for (int ii = 1; ii <= Nratio; ii++) {
			Vb arefU = numSteps / endTime * (refSolU[Nratio * (n-1) + ii] - refSolU[Nratio * (n-1) + ii - 1]);
			Vb brefU = refSolU[Nratio * (n-1) + ii] - n * (refSolU[Nratio * (n-1) + ii] - refSolU[Nratio * (n-1) + ii - 1]);
			Ws arefW = numSteps / endTime * (refSolW[Nratio * (n-1) + ii] - refSolW[Nratio * (n-1) + ii - 1]);
			Ws brefW = refSolW[Nratio * (n-1) + ii] - n * (refSolW[Nratio * (n-1) + ii] - refSolW[Nratio * (n-1) + ii - 1]);

			errUsq += 1.0/3.0 * (((n-1)/numSteps + ii/Nref)^3 - ((n-1)/numSteps + (ii-1)/Nref)^3) * endTime^3 * int2d(Thb)((aNU - arefU)^2 + (grad(aNU) - grad(arefU)) '* (grad(aNU) - grad(arefU)))
			+ (((n-1)/numSteps + ii/Nref)^2 - ((n-1)/numSteps + (ii-1)/Nref)^2) * endTime^2 * int2d(Thb)((aNU - arefU) * (bNU - brefU) + (grad(aNU) - grad(arefU)) '* (grad(bNU) - grad(brefU)))
			+ 1.0/Nref * endTime * int2d(Thb)((bNU - brefU)^2 + (grad(bNU) - grad(brefU)) '* (grad(bNU) - grad(brefU)));

			errVsq += 1.0/Nref * endTime * int1d(Ths)((Mh - refSolV[Nratio * (n-1) + ii])^2);

			errWsq += 1.0/3.0 * (((n-1)/numSteps + ii/Nref)^3 - ((n-1)/numSteps + (ii-1)/Nref)^3) * endTime^3 * int1d(Ths)((aNW - arefW)^2 + (grad(aNW) - grad(arefW)) '* (grad(aNW) - grad(arefW)))
			+ (((n-1)/numSteps + ii/Nref)^2 - ((n-1)/numSteps + (ii-1)/Nref)^2) * endTime^2 * int1d(Ths)((aNW - arefW) * (bNW - brefW) + (grad(aNW) - grad(arefW)) '* (grad(bNW) - grad(brefW)))
			+ 1.0/Nref * endTime * int1d(Ths)((bNW - brefW)^2 + (grad(bNW) - grad(brefW)) '* (grad(bNW) - grad(brefW)));

			errSsq += 1.0/Nref * endTime * int1d(Ths)((sh - refSolS[Nratio * (n-1) + ii])^2);
		}

		// Update the solutions
		Mold = Mh;
		Nold = Nh;
		wold = wh;
	}
	cout << dt << " " << sqrt(errUsq) << " " << sqrt(errVsq) << " " << sqrt(errWsq) << " " << sqrt(errSsq) << endl;
}