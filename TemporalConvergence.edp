load "msh3"
load "mmg"

verbosity = 0;


// Simulation parameters
real eta = 0.0;  // Bacterial death rate
real m = 4.0;  // PME exponent


// Model functions
func real Phi(real u) {
	if (u <= 0.0) {
		return 0.0;
	} else {
		return u^m;
	}
}

func real Phiprime(real u) {
	if (u <= 0.0) {
		return 0.0;
	} else {
		return m * u^(m-1.0);
	}
}

// Double splitting functions
func real b(real s) {
	if (s < 0.0) {
		return 0.0;
	} else if (s <= m^(1.0/(1.0-m))) {
		return s;
	} else {
		return (s + m^(m/(1.0-m)) - m^(1.0/(1.0-m)))^(1/m);
	}
}

func real bprime(real s) {
	if (s < 0.0) {
		return 0.0;
	} else if (s <= m^(1.0/(1.0-m))) {
		return 1.0;
	} else {
		return (1.0/m) * (s + m^(m/(1.0-m)) - m^(1.0/(1.0-m)))^((1.0-m)/m);
	}
}

func real B(real s) {
	if (s < 0.0) {
		return s;
	} else if (s <= m^(1.0/(1.0-m))) {
		return s^m;
	} else {
		return s + m^(m/(1.0-m)) - m^(1.0/(1.0-m));
	}
}

func real Bprime(real s) {
	if (s < 0.0) {
		return 1.0;
	} else if (s <= m^(1.0/(1.0-m))) {
		return m * s^(m-1.0);
	} else {
		return 1.0;
	}
}

func real Binv(real w) {
	if (w < 0.0) {
		return w;
	} else if (w <= m^(m/(1.0-m))) {
		return w^(1.0/m);
	} else {
		return w - m^(m/(1.0-m)) + m^(1.0/(1.0-m));
	}
}

// Barenblatt solution
macro BB(t) ((0.01 + t)^(-0.25)  * max(0.0, 0.04 - 0.046875 * (0.01 + t)^(-0.25) * (x^2.0 + y^2.0))^(1.0/3.0))// Barenblatt solution
macro BBx(t) (x^2.0 + y^2.0 < (64.0/75.0) * (0.01 + t)^0.25 ? -0.03125 * (0.01 + t)^(-1.0) * x * (BB(t))^(-2.0) : 0.0)// Barenblatt solution x derivative
macro BBy(t) (x^2.0 + y^2.0 < (64.0/75.0) * (0.01 + t)^0.25 ? -0.03125 * (0.01 + t)^(-1.0) * y * (BB(t))^(-2.0) : 0.0)// Barenblatt solution y derivative


//Initial conditions and final conditions
real t = 0.0;
func v0 = BB(0.0);
func v1 = BB(1.0);

func Dt = x^2.0 + y^2.0 < (64.0/75.0) * 1.01^0.25 ? -(100.0/404.0) * v1 + (625.0/163216.0) * (x^2.0 + y^2.0) * v1^(-2.0) : 0.0;
func Dx = BBx(1.0);
func Dxx = x^2.0 + y^2.0 < (64.0/75.0) * 1.01^0.25 ? -(100.0/3232.0) * v1^(-2.0) - (625.0/326432.0) * x^2 * v1^(-5.0) : 0.0;
func Dy = BBy(1.0);
func Dyy = x^2.0 + y^2.0 < (64.0/75.0) * 1.01^0.25 ? -(100.0/3232.0) * v1^(-2.0) - (625.0/326432.0) * y^2 * v1^(-5.0) : 0.0;


// Discretisation parameters
real endTime = 1.0;
int numSteps = 1000;  // Number of timesteps
real dt = endTime/numSteps;  // Temporal discretisation parameter


// Linearisation parameters
real L = 1.5;  // Value of ML in the M-scheme
real M = 1e-3;  // Value of M in the M-scheme
int maxIter = 100;  // Maetamum number of iterations for the stopping criterion
real errorTol = 1e-6;  // Error tolerance for the stopping criterion


// Domain definition and mesh generation
cout << "Starting mesh construction...";
border bottom(t=-1.0, 1.0){x = t; y = -1.0;}
border right(t=-1.0, 1.0){x = 1.0; y = t;}
border top(t=1.0, -1.0){x = t; y = 1.0;}
border left(t=1.0, -1.0){x = -1.0; y = t;}
mesh Ths = buildmesh(bottom(2) + right(2) + top(2) + left(2));
for (int i = 0; i <= 10; i++) {
	Ths = adaptmesh(Ths, 0.01, IsMetric=true, nbvx=80000);  // This is here to make sure the mesh isn't axis-aligned
	cout << ".";
}
cout << endl << "Finished mesh construction." << endl << endl;


// The linearisation coefficients
func real Lb(real s) { return min(L, max(bprime(s) + M*dt, 2.0*M*dt)); }
func real LB(real s) { return min(L, max(Bprime(s) + M*dt, 2.0*M*dt)); }


// Finite element spaces and functions
fespace Vh(Ths, [P1, P0]);
fespace P0s(Ths, P0);
fespace P1s(Ths, P1);

P0s vh = v0;
P0s vold = v0;
Vh [wh, sh] = [Phi(v0), Binv(Phi(v0))], [phi, psi];
Vh [wold, sold] = [Phi(v0), Binv(Phi(v0))], [wprev, sprev] = [Phi(v0), Binv(Phi(v0))];


// Useful macros
macro grad(v) [dx(v), dy(v)]// Gradient operator


// Variational form of the IBVP
problem Biofilm([wh, sh], [phi, psi]) =
int2d(Ths)((1.0 + dt * eta) * Lb(sprev) * sh * phi)
+ int2d(Ths)(dt * grad(wh) '* grad(phi))
- int2d(Ths)(vold * phi)
- int2d(Ths)((1.0 + dt * eta) * (Lb(sprev) * sprev - b(sprev)) * phi)
+ int2d(Ths)((1.0 + dt * eta) * Lb(sprev) * (LB(sprev) * sh - wh) * psi)
- int2d(Ths)((1.0 + dt * eta) * Lb(sprev) * (LB(sprev) * sprev - B(sprev)) * psi)
+ on(bottom, right, top, left, wh = 0.0);


// Iteration variables
int it = 0;  // Current iteration index
real linError = 0.0;  // Current linearisation error
int paramDiv = false;  // Divergence flag

cout << "dt -- v error -- w error -- s error" << endl;
int[int] numStepss = [1, 2, 4, 5, 8, 10, 16, 20, 25];
for (int j = 0; j < numStepss.n; j++) {
	numSteps = numStepss[j];
	dt = endTime/numSteps;
	t = 0.0;

	// The discretisation errors
	real errVsq = 0.0;
	real errWsq = 0.0;
	real errSsq = 0.0;

	vh = v0;
	vold = v0;
	[wh, sh] = [Phi(v0), Binv(Phi(v0))];
	[wprev, sprev] = [Phi(v0), Binv(Phi(v0))];

	// Iteration variables
	it = 0;  // Current iteration index
	linError = 0.0;  // Current linearisation error
	paramDiv = false;  // Divergence flag

	for (int n = 1; n <= numSteps; n++) {
		t = n * dt;
		if (verbosity >= 1) cout << t << endl;

		linError = 1.0;
		it = 0;

		while (it < maxIter && linError > errorTol) {  // Stopping criterion
			it++;

			// Solve the surface equation
			Biofilm;

			// Compute the current linearisation error
			linError = sqrt(int2d(Ths)(Lb(sprev) * LB(sprev) * (sh-sprev)^2.0 + dt * (grad(wh) - grad(wprev)) '* (grad(wh) - grad(wprev))));

			if (verbosity > 1) cout << endl << "Linearisation error after iteration " << it << " is " << linError << endl;

			// Update the solutions
			vh = Lb(sprev) * (sh - sprev) + b(sprev);
			[wprev, sprev] = [wh, sh];

			if (linError > 100.0) {
				paramDiv = true;
				break;
			}
		}

		if (verbosity > 0) {
			if (linError <= errorTol) {
				cout << "Linearisation scheme converged after " << it << " iterations" << endl << endl;
			} else {
				cout << "Linearisation scheme did not converge after " << it << " iterations, continuing..." << endl << endl;
			}
		}

		if (paramDiv) {
			cout << "Linearisation scheme DIVERGED after " << it << " iterations" << endl << endl;
			break;
		}

		// Add the errors from the current time step
		errVsq += int2d(Ths)((vold - BB(t - dt))^2) + 3 * int2d(Ths)((vh - BB(t - 2.0/3.0 * dt))^2) + 3 * int2d(Ths)((vh - BB(t - 1.0/3.0 * dt))^2) + int2d(Ths)((vh - BB(t))^2);
		errWsq += int2d(Ths)((grad(wold) - Phiprime(BB(t - dt)) * [BBx(t - dt), BBy(t - dt)]) '* (grad(wh) - Phiprime(BB(t - dt)) * [BBx(t - dt), BBy(t - dt)]))
		+ 3 * int2d(Ths)((2.0/3.0 * grad(wold) + 1.0/3.0 * grad(wh) - Phiprime(BB(t - 2.0/3.0 * dt)) * [BBx(t - 2.0/3.0 * dt), BBy(t - 2.0/3.0 * dt)]) '* (grad(wh) - Phiprime(BB(t - 2.0/3.0 * dt)) * [BBx(t - 2.0/3.0 * dt), BBy(t - 2.0/3.0 * dt)]))
		+ 3 * int2d(Ths)((1.0/3.0 * grad(wold) + 2.0/3.0 * grad(wh) - Phiprime(BB(t - 1.0/3.0 * dt)) * [BBx(t - 1.0/3.0 * dt), BBy(t - 1.0/3.0 * dt)]) '* (grad(wh) - Phiprime(BB(t - 1.0/3.0 * dt)) * [BBx(t - 1.0/3.0 * dt), BBy(t - 1.0/3.0 * dt)]))
		+ int2d(Ths)((grad(wh) - Phiprime(BB(t)) * [BBx(t), BBy(t)]) '* (grad(wh) - Phiprime(BB(t)) * [BBx(t), BBy(t)]));
		errSsq += int2d(Ths)((sold - Binv(Phi(BB(t - dt))))^2) + 3 * int2d(Ths)((sh - Binv(Phi(BB(t - 2.0/3.0 * dt))))^2) + 3 * int2d(Ths)((sh - Binv(Phi(BB(t - 1.0/3.0 * dt))))^2) + int2d(Ths)((sh - Binv(Phi(BB(t))))^2);

		// Update the solution
		vold = vh;
		[wold, sold] = [wh, sh];
	}

	cout << dt << " " << sqrt(0.125 * dt * errVsq) << " " << sqrt(0.125 * dt * errWsq) << " " << sqrt(0.125 * dt * errSsq) << endl;
}